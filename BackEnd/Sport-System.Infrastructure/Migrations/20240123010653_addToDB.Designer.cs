// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Sports_System.Infrastructure.Data;

#nullable disable

namespace Sport_System.Infrastructure.Migrations
{
    [DbContext(typeof(ApplicationDbContext))]
    [Migration("20240123010653_addToDB")]
    partial class addToDB
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "6.0.26")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder, 1L, 1);

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRole", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasDatabaseName("RoleNameIndex")
                        .HasFilter("[NormalizedName] IS NOT NULL");

                    b.ToTable("AspNetRoles", (string)null);

                    b.HasData(
                        new
                        {
                            Id = "adminRoleId1293931239438254523",
                            ConcurrencyStamp = "c30d1383-ac8b-4a1c-a7bb-05b95e27c8f7",
                            Name = "Admin",
                            NormalizedName = "ADMIN"
                        },
                        new
                        {
                            Id = "userRoleId23094852091092347944",
                            ConcurrencyStamp = "ad772ae9-5932-490e-878b-c30d1ec1ca32",
                            Name = "RegisteredUser",
                            NormalizedName = "REGISTEREDUSER"
                        },
                        new
                        {
                            Id = "teamOwnerRoleId23453453451092312341",
                            ConcurrencyStamp = "3418f935-9fa2-401b-849c-14817f1d0463",
                            Name = "TeamOwner",
                            NormalizedName = "TEAMOWNER"
                        },
                        new
                        {
                            Id = "playerRoleId2345123412339234794",
                            ConcurrencyStamp = "06a0c669-2e2e-468f-8855-c1da527fadbd",
                            Name = "Player",
                            NormalizedName = "PLAYER"
                        },
                        new
                        {
                            Id = "tournamentAdministratorRoleId2345334566",
                            ConcurrencyStamp = "396fba6b-02de-4ab9-9be4-1333ababcdc2",
                            Name = "TournamentAdministrator",
                            NormalizedName = "TOURNAMENTADMINISTRATOR"
                        });
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("RoleId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderKey")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("RoleId")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles", (string)null);

                    b.HasData(
                        new
                        {
                            UserId = "adminuser11234980723452903459235",
                            RoleId = "adminRoleId1293931239438254523"
                        },
                        new
                        {
                            UserId = "defaultuser11234980723452903459235",
                            RoleId = "userRoleId23094852091092347944"
                        });
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Value")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens", (string)null);
                });

            modelBuilder.Entity("Sport_System.Domain.Entity.Player", b =>
                {
                    b.Property<int>("PlayerId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("PlayerId"), 1L, 1);

                    b.Property<string>("ApplicationUserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("JerseyNumber")
                        .HasColumnType("int");

                    b.Property<string>("Position")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("Registered_At")
                        .HasColumnType("datetime2");

                    b.Property<int>("SportId")
                        .HasColumnType("int");

                    b.Property<int?>("TeamId")
                        .IsRequired()
                        .HasColumnType("int");

                    b.HasKey("PlayerId");

                    b.HasIndex("ApplicationUserId");

                    b.HasIndex("SportId");

                    b.HasIndex("TeamId");

                    b.ToTable("Players");

                    b.HasData(
                        new
                        {
                            PlayerId = 1,
                            ApplicationUserId = "kajtazbacaj542225",
                            JerseyNumber = 11,
                            Position = "Striker",
                            Registered_At = new DateTime(2024, 1, 23, 2, 6, 53, 429, DateTimeKind.Local).AddTicks(381),
                            SportId = 3,
                            TeamId = 4
                        },
                        new
                        {
                            PlayerId = 2,
                            ApplicationUserId = "flamurraci542225",
                            JerseyNumber = 24,
                            Position = "Defender",
                            Registered_At = new DateTime(2024, 1, 23, 2, 6, 53, 429, DateTimeKind.Local).AddTicks(417),
                            SportId = 3,
                            TeamId = 4
                        },
                        new
                        {
                            PlayerId = 3,
                            ApplicationUserId = "artmorina542225",
                            JerseyNumber = 23,
                            Position = "Midfielder",
                            Registered_At = new DateTime(2024, 1, 23, 2, 6, 53, 429, DateTimeKind.Local).AddTicks(421),
                            SportId = 3,
                            TeamId = 3
                        });
                });

            modelBuilder.Entity("Sport_System.Domain.Entity.Team", b =>
                {
                    b.Property<int>("TeamId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("TeamId"), 1L, 1);

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Location")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("LogoUrl")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("Registered_At")
                        .HasColumnType("datetime2");

                    b.Property<string>("ShortName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("SportId")
                        .HasColumnType("int");

                    b.Property<string>("SportName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("TeamOwnerId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.Property<int?>("YearFounded")
                        .HasColumnType("int");

                    b.HasKey("TeamId");

                    b.HasIndex("SportId");

                    b.HasIndex("TeamOwnerId");

                    b.ToTable("Teams");

                    b.HasData(
                        new
                        {
                            TeamId = 1,
                            Description = "Spanish Football Team.",
                            LogoUrl = "/images/fcbarcelona.png",
                            Name = "FC Barcelona",
                            Registered_At = new DateTime(2024, 1, 23, 1, 6, 53, 429, DateTimeKind.Utc).AddTicks(683),
                            SportId = 1,
                            SportName = "Football",
                            TeamOwnerId = "flamurraci542225"
                        },
                        new
                        {
                            TeamId = 2,
                            Description = "Italian Football Team",
                            LogoUrl = "/images/milan.png",
                            Name = "AC Milan",
                            Registered_At = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            SportId = 1,
                            SportName = "Football",
                            TeamOwnerId = "kajtazbacaj542225"
                        },
                        new
                        {
                            TeamId = 3,
                            Description = "Spanish Football Team",
                            LogoUrl = "/images/realmadrid.png",
                            Name = "Real Madrid",
                            Registered_At = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            SportId = 1,
                            SportName = "Football",
                            TeamOwnerId = "kajtazbacaj542225"
                        },
                        new
                        {
                            TeamId = 4,
                            Description = "English Football Team",
                            LogoUrl = "/images/chelsea.png",
                            Name = "Chelsea FC",
                            Registered_At = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            SportId = 1,
                            SportName = "Football",
                            TeamOwnerId = "artmorina542225"
                        },
                        new
                        {
                            TeamId = 5,
                            Description = "NBA Team",
                            LogoUrl = "/images/lakers.png",
                            Name = "LA Lakers",
                            Registered_At = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            SportId = 2,
                            SportName = "Basketball",
                            TeamOwnerId = "artmorina542225"
                        });
                });

            modelBuilder.Entity("Sport_System.Domain.Models.ApplicationUser", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("int");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("DateOfBirth")
                        .HasColumnType("datetime2");

                    b.Property<string>("Email")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Gender")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("bit");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("Nationality")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("ProfileUrl")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("bit");

                    b.Property<string>("UserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedEmail")
                        .HasDatabaseName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasDatabaseName("UserNameIndex")
                        .HasFilter("[NormalizedUserName] IS NOT NULL");

                    b.ToTable("AspNetUsers", (string)null);

                    b.HasData(
                        new
                        {
                            Id = "kajtazbacaj542225",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "e91c97a3-41cd-48f9-a581-8774b91a86c0",
                            DateOfBirth = new DateTime(1990, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Email = "kbacaj5@gmail.com",
                            EmailConfirmed = false,
                            FirstName = "Kajtaz",
                            Gender = "Male",
                            LastName = "Bacaj",
                            LockoutEnabled = false,
                            Nationality = "Albanian",
                            NormalizedEmail = "KBACAJ5@GMAIL.COM",
                            PasswordHash = "AQAAAAEAACcQAAAAEGwHnMELjXf5RTLNys4hfYpFGj7QDtZafB66y15qQ+jfagTygtWVnkEMb6EbMJHa4g==",
                            PhoneNumberConfirmed = false,
                            ProfileUrl = "/images/profilepicture3.png",
                            SecurityStamp = "34c0499f-b21c-4d23-97ee-c5cc0e95f716",
                            TwoFactorEnabled = false,
                            UserName = "KajtazBacaj"
                        },
                        new
                        {
                            Id = "flamurraci542225",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "aa6f2cf5-5ebc-44ed-9169-f48d7665457b",
                            DateOfBirth = new DateTime(1990, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Email = "flamurraci@gmail.com",
                            EmailConfirmed = false,
                            FirstName = "Flamur",
                            Gender = "Male",
                            LastName = "Raci",
                            LockoutEnabled = false,
                            Nationality = "Albanian",
                            NormalizedEmail = "FLAMURRACI@GMAIL.COM",
                            PasswordHash = "AQAAAAEAACcQAAAAEDD496Tl3ft0v14M17UvvW2Us93y3mxvly/M8jUUp2afIa1Bqh3q7ZLlOri2iamriw==",
                            PhoneNumberConfirmed = false,
                            ProfileUrl = "/images/profilepicture2.png",
                            SecurityStamp = "da72f861-ce23-403c-b310-099f88261935",
                            TwoFactorEnabled = false,
                            UserName = "FlamurRaci"
                        },
                        new
                        {
                            Id = "artmorina542225",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "5675fe1f-f78e-4c50-9c63-22da7ff98f33",
                            DateOfBirth = new DateTime(1990, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Email = "artmorina@gmail.com",
                            EmailConfirmed = false,
                            FirstName = "Art",
                            Gender = "Male",
                            LastName = "Morina",
                            LockoutEnabled = false,
                            Nationality = "Albanian",
                            NormalizedEmail = "ARTMORINA@GMAIL.COM",
                            PasswordHash = "AQAAAAEAACcQAAAAEP2GL9mWgptKUjvQx5PC2+2eyX0ZknYvIdPgZq8baGVwrMLZtitA4fpagbFs/veXWA==",
                            PhoneNumberConfirmed = false,
                            ProfileUrl = "/images/profilepicture4.png",
                            SecurityStamp = "1233312d-71d3-459f-8f91-660767c829ef",
                            TwoFactorEnabled = false,
                            UserName = "ArtMorina"
                        },
                        new
                        {
                            Id = "adminuser11234980723452903459235",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "ec367015-e77c-49d6-b079-d553663704ed",
                            DateOfBirth = new DateTime(1990, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Email = "admin@gmail.com",
                            EmailConfirmed = false,
                            FirstName = "Admin",
                            Gender = "Male",
                            LastName = "User",
                            LockoutEnabled = false,
                            Nationality = "Albanian",
                            NormalizedEmail = "ADMIN@GMAIL.COM",
                            PasswordHash = "AQAAAAEAACcQAAAAELRZdfzrLIkBDNgzQmu7STetz+7+5Cx5hGfUVodzGKV+Z5N+A+fFJCr4lU9Mkr4VIQ==",
                            PhoneNumberConfirmed = false,
                            ProfileUrl = "/images/profilepicture.jpg",
                            SecurityStamp = "ef363e16-e9dc-49d6-8b2a-1129cc3f4f27",
                            TwoFactorEnabled = false,
                            UserName = "admin"
                        },
                        new
                        {
                            Id = "defaultuser11234980723452903459235",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "6c9e278e-3a33-4c98-ad53-36c91530da10",
                            DateOfBirth = new DateTime(1990, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Email = "user@gmail.com",
                            EmailConfirmed = false,
                            FirstName = "Default",
                            Gender = "Male",
                            LastName = "User",
                            LockoutEnabled = false,
                            Nationality = "Albanian",
                            NormalizedEmail = "USER@GMAIL.COM",
                            PasswordHash = "AQAAAAEAACcQAAAAEE94mQXSah8Q0XTp5gFA6JwmkjZAyJFp5GX0Krju+L7zPXrH5898eWO1FkojTnPhBw==",
                            PhoneNumberConfirmed = false,
                            ProfileUrl = "/images/profilepicturedefault.jpg",
                            SecurityStamp = "6f5f02f8-8e76-4e7a-8ea1-af88e3f5dda2",
                            TwoFactorEnabled = false,
                            UserName = "defaultUser"
                        });
                });

            modelBuilder.Entity("Sport_System.Domain.Models.Sport", b =>
                {
                    b.Property<int>("SportId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("SportId"), 1L, 1);

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("SportId");

                    b.ToTable("Sports");

                    b.HasData(
                        new
                        {
                            SportId = 1,
                            Description = "Sport",
                            Name = "Football"
                        },
                        new
                        {
                            SportId = 2,
                            Description = "Sport",
                            Name = "Basketball"
                        },
                        new
                        {
                            SportId = 3,
                            Description = "Sport",
                            Name = "Volleyball"
                        },
                        new
                        {
                            SportId = 4,
                            Description = "Sport",
                            Name = "Mixed Martial Arts"
                        },
                        new
                        {
                            SportId = 5,
                            Description = "Sport",
                            Name = "Swimming"
                        },
                        new
                        {
                            SportId = 6,
                            Description = "Sport",
                            Name = "Volleyball"
                        },
                        new
                        {
                            SportId = 7,
                            Description = "Sport",
                            Name = "Boxing"
                        },
                        new
                        {
                            SportId = 8,
                            Description = "Sport",
                            Name = "Baseball"
                        },
                        new
                        {
                            SportId = 9,
                            Description = "Sport",
                            Name = "Golf"
                        },
                        new
                        {
                            SportId = 10,
                            Description = "Sport",
                            Name = "Hockey"
                        },
                        new
                        {
                            SportId = 11,
                            Description = "Sport",
                            Name = "Skiing"
                        },
                        new
                        {
                            SportId = 12,
                            Description = "Sport",
                            Name = "American Football"
                        },
                        new
                        {
                            SportId = 13,
                            Description = "Sport",
                            Name = "Bowling"
                        },
                        new
                        {
                            SportId = 14,
                            Description = "Sport",
                            Name = "Skating"
                        },
                        new
                        {
                            SportId = 15,
                            Description = "Sport",
                            Name = "Judo"
                        },
                        new
                        {
                            SportId = 16,
                            Description = "Sport",
                            Name = "Kickboxing"
                        },
                        new
                        {
                            SportId = 17,
                            Description = "Sport",
                            Name = "Hockey"
                        },
                        new
                        {
                            SportId = 18,
                            Description = "Sport",
                            Name = "Wrestrling"
                        });
                });

            modelBuilder.Entity("Sport_System.Domain.Models.Tournament", b =>
                {
                    b.Property<int>("TournamentId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("TournamentId"), 1L, 1);

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ImageUrl")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Location")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Rules")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("SportId")
                        .HasColumnType("int");

                    b.Property<string>("SportName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("TournamentAdministratorId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("TournamentId");

                    b.HasIndex("SportId");

                    b.HasIndex("TournamentAdministratorId");

                    b.ToTable("Tournaments");

                    b.HasData(
                        new
                        {
                            TournamentId = 1,
                            Description = "Europian Clubs Competition.",
                            ImageUrl = "/images/champions.png",
                            Name = "Champions League",
                            SportId = 1,
                            SportName = "Football",
                            TournamentAdministratorId = "artmorina542225"
                        },
                        new
                        {
                            TournamentId = 2,
                            Description = "Europian Clubs Competition.",
                            ImageUrl = "/images/europian.png",
                            Name = "Europa League",
                            SportId = 1,
                            SportName = "Football",
                            TournamentAdministratorId = "artmorina542225"
                        },
                        new
                        {
                            TournamentId = 3,
                            Description = "Europian Clubs Competition.",
                            ImageUrl = "/images/ligakosoves.png",
                            Name = "Liga e Kosoves",
                            SportId = 1,
                            SportName = "Football",
                            TournamentAdministratorId = "kajtazbacaj542225"
                        },
                        new
                        {
                            TournamentId = 4,
                            Description = "NBA Teams compete of Glory.",
                            ImageUrl = "/images/nbaplayoffs.png",
                            Name = "NBA Play-Offs",
                            SportId = 2,
                            SportName = "Basketball",
                            TournamentAdministratorId = "kajtazbacaj542225"
                        },
                        new
                        {
                            TournamentId = 5,
                            Description = "Europian Clubs Compete.",
                            ImageUrl = "/images/europeconference.png",
                            Name = "Europa Conference League",
                            SportId = 1,
                            SportName = "Football",
                            TournamentAdministratorId = "flamurraci542225"
                        });
                });

            modelBuilder.Entity("TeamTournament", b =>
                {
                    b.Property<int>("TeamsTeamId")
                        .HasColumnType("int");

                    b.Property<int>("TournamentsTournamentId")
                        .HasColumnType("int");

                    b.HasKey("TeamsTeamId", "TournamentsTournamentId");

                    b.HasIndex("TournamentsTournamentId");

                    b.ToTable("TeamTournament");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.HasOne("Sport_System.Domain.Models.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.HasOne("Sport_System.Domain.Models.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Sport_System.Domain.Models.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.HasOne("Sport_System.Domain.Models.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Sport_System.Domain.Entity.Player", b =>
                {
                    b.HasOne("Sport_System.Domain.Models.ApplicationUser", "ApplicationUser")
                        .WithMany("Players")
                        .HasForeignKey("ApplicationUserId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("Sport_System.Domain.Models.Sport", "Sport")
                        .WithMany("Players")
                        .HasForeignKey("SportId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("Sport_System.Domain.Entity.Team", "Team")
                        .WithMany("Players")
                        .HasForeignKey("TeamId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("ApplicationUser");

                    b.Navigation("Sport");

                    b.Navigation("Team");
                });

            modelBuilder.Entity("Sport_System.Domain.Entity.Team", b =>
                {
                    b.HasOne("Sport_System.Domain.Models.Sport", "Sport")
                        .WithMany("Teams")
                        .HasForeignKey("SportId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("Sport_System.Domain.Models.ApplicationUser", "TeamOwner")
                        .WithMany("Teams")
                        .HasForeignKey("TeamOwnerId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.Navigation("Sport");

                    b.Navigation("TeamOwner");
                });

            modelBuilder.Entity("Sport_System.Domain.Models.Tournament", b =>
                {
                    b.HasOne("Sport_System.Domain.Models.Sport", "Sport")
                        .WithMany("Tournaments")
                        .HasForeignKey("SportId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("Sport_System.Domain.Models.ApplicationUser", "TournamentAdministrator")
                        .WithMany("Tournaments")
                        .HasForeignKey("TournamentAdministratorId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Sport");

                    b.Navigation("TournamentAdministrator");
                });

            modelBuilder.Entity("TeamTournament", b =>
                {
                    b.HasOne("Sport_System.Domain.Entity.Team", null)
                        .WithMany()
                        .HasForeignKey("TeamsTeamId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Sport_System.Domain.Models.Tournament", null)
                        .WithMany()
                        .HasForeignKey("TournamentsTournamentId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Sport_System.Domain.Entity.Team", b =>
                {
                    b.Navigation("Players");
                });

            modelBuilder.Entity("Sport_System.Domain.Models.ApplicationUser", b =>
                {
                    b.Navigation("Players");

                    b.Navigation("Teams");

                    b.Navigation("Tournaments");
                });

            modelBuilder.Entity("Sport_System.Domain.Models.Sport", b =>
                {
                    b.Navigation("Players");

                    b.Navigation("Teams");

                    b.Navigation("Tournaments");
                });
#pragma warning restore 612, 618
        }
    }
}
